# Optional OTMM components
{{- if .Values.options.adaptivemedia }}

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: amd-repository-pvc
  namespace: {{ .Values.global.namespace }}
spec:
  accessModes:
  - ReadWriteMany
  storageClassName: {{ .Values.storage.nfsClass }}
  resources:
    requests:
      storage: {{ .Values.storage.adaptivemedia }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: adaptivemedia
  namespace: {{ .Values.global.namespace }}
  labels:
    app: adaptivemedia
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount.adaptivemedia }}
  selector:
    matchLabels:
      app: adaptivemedia
  serviceName: {{ .Values.adaptivemedia.service.name }}    
  template:
    metadata:
      labels:
        app: adaptivemedia
        release: {{ .Release.Name }}
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
{{- if eq .Values.nodeSelector.useNodeSelector true }}
      nodeSelector:
        {{ .Values.nodeSelector.adaptivemedia.nodeLabel }}
{{- end }}
      containers:
      - name: {{ .Values.adaptivemedia.service.name }}
        image: "{{ .Values.global.repository }}/{{ .Values.adaptivemedia.container.name }}:{{ .Values.adaptivemedia.container.tag }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
        resources:
          requests:
            memory: {{ .Values.memory.adaptivemedia }}
            cpu: {{ .Values.cpu.adaptivemedia }}
        envFrom:
        - configMapRef:
            name: otmm-configmap
{{- if eq .Values.global.useNewRelic "true" }}             
        env:
        - name: NEW_RELIC_APP_NAME
          value: "{{ .Values.adaptivemedia.service.name }}-{{ .Values.global.namespace }}.$(CF_BASE_URL)"
{{- end }} 
        ports:
        - containerPort: {{ .Values.adaptivemedia.service.port }}
        readinessProbe:
          httpGet:
            path: /adaptivemedia/ping
            port: {{ .Values.adaptivemedia.service.port }}
          initialDelaySeconds: 50
          failureThreshold: 10
          periodSeconds: 60
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - /opt/AMD/tools/liveness_probe.sh amd_entrypoint.sh
          initialDelaySeconds: 20
          failureThreshold: 10
          periodSeconds: 30
          timeoutSeconds: 5
        volumeMounts:
        - name: otmm-secrets-volume
          mountPath: /opt/AMD/custom
        - mountPath: /usr/local/share/amd_repository
          name: amd-volume
{{- $globcustomkey := .Files.Glob "conf/vault/key.txt" }}
{{- if $globcustomkey }}
        - name: custom-encrypt-key-volume
          mountPath: /opt/etc/key
{{- end }}
      volumes:
      - name: otmm-secrets-volume
        configMap:
          name: otmm-secrets-configmap
      - name: amd-volume
        persistentVolumeClaim:
          claimName: amd-repository-pvc
          readOnly: false
{{- $globcustomkey := .Files.Glob "conf/vault/key.txt" }}
{{- if $globcustomkey }}
      - name: custom-encrypt-key-volume
        configMap:
          name: custom-encrypt-key-configmap
{{- end }}


---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.adaptivemedia.service.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: adaptivemedia
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.adaptivemedia.service.type }}
  ports:
    - name: http
      port: {{ .Values.adaptivemedia.service.port }}
  selector:
    app: adaptivemedia
    release: {{ .Release.Name }}

{{- end }}
